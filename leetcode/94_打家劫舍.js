/**
 * 你是一个专业的小偷,计划偷窃沿街的房屋。每间房内都藏有一定的现金
 * ，影响你偷窃的唯一制约因素就是相领的房屋装有相互连通的防盗系统
 * ，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 * 
 *  给定一个代表每个房屋存放金额的非负整数数组，计算你不触动警报系统
 * 的情况下，一夜内能够偷窃到的最高金额
 */
var rob = function (nums) {
   
    //边界条件 亦即初始条件
    // 递推公式
    // dp[i] = Math.max(dp[i - 1],dp[i - 2] + nums[i]);
    // 解释 偷i 的前一个 当前i 就不能偷
    // 偷 i - 2 个 当前i 可以偷 即可判断两种偷的方式的最大值
    // 偷到每个房间时 在当前房间 能偷到的最大金额值
    const dp  = [nums[0], Math.max(nums[0],nums[1])];
    for (let i = 0; i < nums.length; i++) {
      dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
    }
    return dp[nums.length - 1];
}